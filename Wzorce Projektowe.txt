Kompozyt – znany również jako drzewo obiektów jest strukturalnym wzorcem projektowym który ma na celu komponować obiekty w strukturę drzewiastą za pomocą wykorzystania wspólnego interfejsu zlecającego prace podrzędnym komponentom. Wzorzec ten z góry określa dwa typy elementów współdzielących dany interfejs jako proste liście oraz kontenery. Stosujemy go w momencie kiedy chcemy aby kod traktował proste i złożone elementy w ten sam sposób.Najprostszym przykładem takiego wzorca w języku c# jest IEnumerable<T>, Collection<T>, List<T>

Obserwator – jest wzorcem behawioralnym opartym na zasadzie subskrypcji. Dzielimy nasza strukturę kodu na publikatora oraz subskrybenta. Publikatorem jest nasz główna cześć kodu która publikuje zdarzenie, a subskrybent to obiekt który otrzymuje powiadomienie o wydarzeniu/zmianie wywołanym przez publikatora. Między publikatorem a subskrybentem znajduje się interfejs aby nie sprzęgać bezpośrednio publikatora oraz subskrybenta. Stosuje się go w momencie gdy pewne obiekty muszą być informowane o zmianach innych częściach kody w sposób dynamiczny.

Strategia – jest wzorcem behawioralnym delegującym różne sposoby wykonania tego samego zadania do innych klas zwanych strategiami dzięki czemu kontekst zostaje niezmienny i ciągłe wprowadzanie nowych funkcjonalności zbliżonych już do istniejących w aplikacji wymaga wprowadzenia tylu zmian.
Kontekst nie decyduje o strategii czyli o podejściu które wybierze – robi to użytkownik a więc muszą być łatwo zrozumiałe aby mógł dobrać je prawidłowo. Przykładowy sposób zastosowanie było by kalkulowanie trasy ale opierających się o różne element czyli podział zadania na strategie np. kalkulowanie trasy pieszo, samochodem, rowerem.

Metoda Wytwórcza – jest kreacyjnym wzorcem projektowym który umożliwia interfejsowi tworzenie obiektów w ramach klasy bazowej ale pozwala podklasom zmieniać typ tworzonych obiektów. Konstruktor wirtualny pozwala na oddzielenie kodu konstruującego produkty na od kodu który faktycznie z nich korzysta. Metodę wytwórczą stosujemy gdy nie wiemy z góry jakie typy obiektów pojawią się w programie i jakie będą miedzy nimi zależności. Przykładowo możemy zastosować ten wzorzec w momencie gdy chcemy umożliwić użytkownikowi rozbudowę udostępnionej biblioteki.

Dekorator – jest to strukturalny wzorzec projektowy którego idee najlepiej opisuje pojęcie nakładka przykładowo mamy aplikacje do sprzedawania sprzętu, zaszła potrzeba dołączenia czegoś do ofert sprzedaży tego konkretnego sprzętu np. rower i teraz sprzedajemy go z lampka. Rower z lamka będzie miał inna cenę niż sam rower dlatego dekorator może dodać jeszcze własna cenę do ceny roweru.
Dekorator pozwala na dodawanie nowych obowiązków poprzez umieszczanie obiektów w dodatkowych opakowania oferujących dodatkowe możliwości. Wzorzec ten stosowany jest zazwyczaj w momencie gdy zastosowanie dziedziczenia byłoby niepraktyczne bądź niemożliwe.
